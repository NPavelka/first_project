#Подключение необходимых для программы библиотек
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as anim
from scipy.integrate import odeint

# Константы
G = 6.67*10**(-11)   #Гравитационная постоянная
M1 = 5.974*10**24    #Масса первого гравитирующего объекта
M2 = 7.348*10**22    #Масса второго гравитирующего объекта
m = 100              #Масса астероида

#Начальные изменяемые параметры планет
#Первый гравитирующий объект
x1_0 = 0             #Начальная координата "х" первого гравитирующего объекта
Vx1_0 = 0            #Начальная скорость первого гравитирующего объекта, спроецированная на ось Ох
y1_0 = 0             #Начальная координата "у" первого гравитирующего объекта
Vy1_0 = 0            #Начальная скорость первого гравитирующего объекта, спроецированная на ось Оу

#Второй гравитирующий объект
x2_0 = -384400000    #Начальная координата "х" второго гравитирующего объекта
Vx2_0 = 0            #Начальная скорость второго гравитирующего объекта, спроецированная на ось Ох
y2_0 = 0             #Начальная координата "у" второго гравитирующего объекта
Vy2_0 = -1020        #Начальная скорость второго гравитирующего объекта, спроецированная на ось Оу

#Астероид
x_0 = -384400000 * 2 #Начальная координата "х" астероида
Vx_0 = 1000          #Начальная скорость астероида, спроецированная на ось Ох
y_0 = 384400000 * 0.66            #Начальная координата "у" астероида
Vy_0 = 0         #Начальная скорость астероида, спроецированная на ось Оу

#Определяем пределы переменной величины (времени)
t = np.arange(0,10*24*3600, 600)

#Определение функции для системы диф. уравнений
def func(Z,t):
    (x1,Vx1,
     y1,Vy1,

     x2,Vx2,
     y2,Vy2,

     x,Vx,
     y,Vy) = Z
     
    dx1dt = Vx1
    dVx1dt = -G * M2 * (x1-x2) / ((x1-x2)**2 + (y1-y2)**2)**1.5
    dy1dt = Vy1
    dVy1dt = -G * M2 * (y1-y2) / ((x1-x2)**2 + (y1-y2)**2)**1.5
    
    dx2dt = Vx2
    dVx2dt = -G * M1 * (x2-x1) / ((x1-x2)**2 + (y1-y2)**2)**1.5
    dy2dt = Vy2
    dVy2dt = -G * M1 * (y2-y1) / ((x1-x2)**2 + (y1-y2)**2)**1.5
    
    dxdt = Vx
    dVxdt = -G * M1 * (x-x1) / ((x-x1)**2 + (y-y1)**2)**1.5 - G * M2 * (x-x2) / ((x-x2)**2 + (y-y2)**2)**1.5
    dydt = Vy
    dVydt = -G * M1 * (y-y1) / ((x-x1)**2 + (y-y1)**2)**1.5 - G * M2 * (y-y2) / ((x-x2)**2 + (y-y2)**2)**1.5
    
    return (dx1dt, dVx1dt,
            dy1dt, dVy1dt,

            dx2dt, dVx2dt,
            dy2dt, dVy2dt,

            dxdt, dVxdt,
            dydt, dVydt)
    
#Подстановка констант в функцию 
Z_0 = (x1_0, Vx1_0,
       y1_0, Vy1_0,
       
       x2_0, Vx2_0,
       y2_0, Vy2_0,
       
       x_0, Vx_0,
       y_0, Vy_0)

solve_sys = odeint(func,Z_0,t)

# Модуль анимации
fig,ax = plt.subplots(figsize=(8,8))

# Создание маркеров планет и объектов
Obj_1,=plt.plot([],[],marker='.',markersize=30, color='green')
Obj_2,=plt.plot([],[],marker='.',markersize=10, color='blue')
Obj_ast,=plt.plot([],[],marker='.',markersize=5, color='black')

#Создание функции анимации
def animate(i):
    Obj_1.set_data(solve_sys[i,0],solve_sys[i,2])
    Obj_2.set_data(solve_sys[i,4],solve_sys[i,6])
    Obj_ast.set_data(solve_sys[i,8],solve_sys[i,10])
    
    #Определение временного периода
#    ax.set_title('time, minutes {}x10'.format(i))

ast_animation = anim.FuncAnimation(fig,animate,frames=1400,interval=1)

#Украшательства
plt.grid()
plt.xlim(-384400000 * 3,384400000 * 3)
plt.ylim(-384400000 * 3,384400000 * 3)

#Итог
ast_animation.save('Asteroid+Moon+Earth.gif')
